import java.text.SimpleDateFormat
import java.lang.Math
import groovy.json.*
import groovy.sql.Sql

pipeline{
    agent any
    parameters {
        string(name: 'NOM', description: 'Entrez votre nom')
        string(name: 'PRENOM', description: 'Entrez votre prénom')
        string(name: 'AGE', description: 'Entrez votre âge')
        choice(name: 'SEXE', choices: ['Homme', 'Femme'], description: 'Choisir votre sexe')
        string(name: 'POIDS', description: 'Entrez votre poids')
        string(name: 'TAILLE', description: 'Entrez votre taille en mètre')
        choice(name: 'ACTIVITE', choices: ['Sédentaire', 'Activité légère', 'Activité modérée', 'Activité intense'], description: 'Choisissez votre activité sportive : Sédentaire : aucune activité sportive   Activité légère : 1 à 3 entraînements par semaine   Activité modérée : 4 à 6 entraînements par semaine   Activité intense = + de 6 entraînements par semaine.')
        choice(name: 'PERTE', choices: ['0.1', '0.2', '0.3', '0.4', '0.5'], description: 'Choisissez la masse que vous voulez perdre par semaine (100 grammes, 200 grammes, 300 grammes, 400 grammes ou 500 grammes. Une valeur au dessus de 500 grammes serait dangereuse pour le corps.)')
        choice(name: 'NBRE_RE', choices: ['1', '2', '3', '4'], description: 'Choisissez le nombre de repas que vous voulez manger par jour')
        string(name: 'EMAIL', description: 'Entrez votre email')
    }
    stages {
        stage('Build') {
            steps {
                script {
                    
                    echo "Building [EPIC] Surveillance de l'alimentation"
                    //Définition des variables
                    
                    def nom = "${params.NOM}"
                    def prenom = "${params.PRENOM}"
                    def sexe = "${params.SEXE}"
                    def act = "${params.ACTIVITE}"
                    def email = "${params.EMAIL}"
                                        
                    def age = "${params.AGE}"
                    int age_int = age as Integer
                    
                    def taille = "${params.TAILLE}"
                    taille_float = Double.valueOf(taille)
                    
                    def poids = "${params.POIDS}"
                    poids_float = Double.valueOf(poids)
                    
                    def perte = "${params.PERTE}"
                    perte_float = Double.valueOf(perte)
                    
                    def nbre_re = "${params.NBRE_RE}"
                    nbre_re_int = Double.valueOf(nbre_re)
                    
                    def date = new Date()
                    def cur_date = new SimpleDateFormat("MM/dd/yyyy")
                                        
                    //Calcul et affichage de l'IMC 
                    
                    imc = poids_float / (taille_float*taille_float)
                    
                    if (imc < 18.5) {
                        echo "Vous êtes en insuffisance pondérale et avez un imc de ${imc}."
                    }   else if (imc > 18.5 && imc < 25)  {
                        echo "Vous avez une corpulence normale et avez un imc de ${imc}."
                    }   else if (imc > 25 && imc < 30)    {
                        echo "Vous êtes en surpoids et avez un imc de ${imc}."
                    }   else if (imc > 30 && imc < 35)    {
                        echo "Vous êtes en obésité modérée et avez un imc de ${imc}."
                    }   else if (imc > 35 && imc < 40)    {
                        echo "Vous êtes en obésité sévère et avez un imc de ${imc}."
                    }   else
                        echo "Vous êtes en obésité morbide et avez un imc de ${imc}."
                    
                    //Début du calcul du besoin calorique 
                    def val_act = 0
                    
                    if (act == 'Sédentaire')    {
                        val_act = 1.375
                    }   else if (act == 'Activité légère')  {
                        val_act = 1.56
                    }   else if (act == 'Activité modérée')  {
                        val_act = 1.64
                    }   else    {
                        val_act = 1.82
                    }
                    
                    // Formule de Harris revue par Roza et Shizgall
                    
                    def calcul = 0           
                    if (sexe == 'Homme' && age_int < 60 || imc < 30)    {
                        calcul = ((13.707 * poids_float) + (492.3 * taille_float) - (6.673 * age_int) + 77.607) * val_act 
                    }   else if (sexe == 'Femme' && age < 60 || imc < 30)   {
                        calcul = ((9.74 * poids_float) + (172.9 * taille_float) - (4.737 * age_int) + 667.51) * val_act
                        
                    // Formule de Black et al (pour les personnes en obésité ou agées de 60 ans ou plus)
                    
                    bl_ps = powerFunction(poids_float, 0.48)
                    bl_tl = powerFunction(taille_float, 0.5)
                    bl_age = powerFunction(age_int, -0.13)
                    
                    }   else if (sexe == 'Homme' && age_int > 60 || imc > 30)  {
                        calcul = (1.083 * bl_ps * bl_tl * bl_age) * (10000 / 4.1855)
                    }   else    {
                        calcul = (0.963 * bl_ps * bl_tl * bl_age) * (10000 / 4.1855)
                    }
                    echo "Bonjour ${prenom} ${nom},"
                    echo "Votre total calorique est de ${calcul} calories par jour."
                    
                    // Calcul du nombres de calories à consommer pour perdre la valeur donnée dans la variable "perte" en masse par semaine
                    
                    calcul_perteglo = 7700 * perte_float
                    calcul_pertehebdo = calcul - (calcul_perteglo / 7)
                    echo "Pour perdre ${perte} kg par semaine, vous devrez consommer ${calcul_pertehebdo} calories par jour."
                    
                    //Calcul du nombre de calories par repas pour un résultat précis concernant les repas disponibles
                    
                    nbre_cal_re = calcul_pertehebdo/nbre_re_int 
                    
                    //Calcul des apports protéiques, glucidiques et lipidiques nécessaires par jour
                    
                    if (act == 'Sédentaire')    {
                        val_pro = 0.8
                    }   else if (act == 'Activité légère')  {
                        val_pro = 1.2
                    }   else if (act == 'Activité modérée')  {
                        val_pro = 1.6
                    }   else    {
                        val_pro = 2
                    }
                    
                    val_pro_gr = poids_float * val_pro
                    val_lip_gr = (poids_float)
                    val_glu_gr = (calcul_pertehebdo - ((val_pro_gr * 4) + (val_lip_gr * 9))) / 4
                                       
                    echo "Vous avez besoin de ${val_pro_gr} grammes de protéines, ${val_lip_gr} grammes de lipides et ${val_glu_gr} grammes de glucides par jour."
                                        
                    val_pro_gr_re = val_pro_gr / nbre_re_int
                    val_lip_gr_re = val_lip_gr / nbre_re_int
                    val_glu_gr_re = val_glu_gr / nbre_re_int

                    val_pro_gr_re_max = val_pro_gr_re + 5
                    val_lip_gr_re_max = val_lip_gr_re + 5
                    val_glu_gr_re_max = val_glu_gr_re + 5
                    
                    echo "Vous avez besoin de ${val_pro_gr_re} grammes de protéines, ${val_lip_gr_re} grammes de lipides et ${val_glu_gr_re} grammes de glucides par jour."
                    
                    //Requête pour récupérer des exemples de plats compatibles avec le total de calories, protéines, glucides et lipides max par repas 
                    
                    def response = httpRequest "https://api.spoonacular.com/recipes/findByNutrients?apiKey=de54e436479d412991dafdd39eeef448&maxCalories=${nbre_cal_re}&maxCarbs=${val_glu_gr_re_max}&maxProtein=${val_pro_gr_re_max}&maxFat=${val_lip_gr_re_max}"
                    
                    //Parsing et affichage du résutlat en JSON
                    
                    def rep = response.content
                    @NonCPS
                    def jsonSlurper = new groovy.json.JsonSlurperClassic()
                    repas_parse = jsonSlurper.parseText(rep)
                    echo "Vous pouvez manger ces respas-ci à chaque repas : "
                    println(repas_parse.title)
                    
                    // Début du challenge
                    
                    try {
                        def insert = "cmd /c C:\\Users\\tolio\\OneDrive\\Documents\\Cours\\DevOps\\Scripts\\insert_into.bat".execute()
                        def output_ins = new BufferedReader (new InputStreamReader(insert.getInputStream()))
                        while ((line = output_ins.readLine()) != null) {log.info line}
                    } catch (Exception e) {
                        def select = "cmd /c C:\\Users\\tolio\\OneDrive\\Documents\\Cours\\DevOps\\Scripts\\select.bat".execute()
                        def output_sel = new BufferedReader (new InputStreamReader(insert.getInputStream()))
                        while ((line = output_sel.readLine()) != null) {log.info line}

                    }
                }
            }
        }
    }
}
